//
//  pushTests.m
//  system7-tests
//
//  Created by Pavlo Shkrabliuk on 05.05.2020.
//  Copyright Â© 2020 Readdle. All rights reserved.
//

#import <XCTest/XCTest.h>

#import "S7InitCommand.h"
#import "S7AddCommand.h"
#import "S7RebindCommand.h"
#import "S7PushCommand.h"

@interface pushTests : XCTestCase
@property (nonatomic, strong) TestReposEnvironment *env;
@end

@implementation pushTests

- (void)setUp {
    self.env = [TestReposEnvironment new];
}

- (void)tearDown {
    // Put teardown code here. This method is called after the invocation of each test method in the class.
}

#pragma mark -

- (void)testCreate {
    S7PushCommand *command = [S7PushCommand new];
    XCTAssertNotNil(command);
}

- (void)testOnNotS7Repo {
    S7PushCommand *command = [S7PushCommand new];
    XCTAssertEqual(S7ExitCodeNotS7Repo, [command runWithArguments:@[]]);
}

- (void)testOnEmptyS7Repo {
    executeInDirectory(self.env.pasteyRd2Repo.absolutePath, ^int{
        s7init();

        S7PushCommand *command = [S7PushCommand new];
        XCTAssertEqual(S7ExitCodeNoCommittedS7Config, [command runWithArguments:@[]]);
    });
}

- (void)testSubrepoIsntPushedIfConfigIsUnknownToGit {
    executeInDirectory(self.env.pasteyRd2Repo.absolutePath, ^int{
        s7init();

        NSString *subrepoPath = @"Dependencies/ReaddleLib";
        GitRepository *subrepoGit = s7add(subrepoPath, self.env.githubReaddleLibRepo.absolutePath);

        NSString *readdleLibRevision = makeSampleCommitToReaddleLib(subrepoGit);

        S7PushCommand *pushCommand = [S7PushCommand new];
        XCTAssertEqual(S7ExitCodeNoCommittedS7Config, [pushCommand runWithArguments:@[]]);

        const BOOL isReaddleLibPushed = [self.env.githubReaddleLibRepo isRevisionAvailable:readdleLibRevision];
        XCTAssertFalse(isReaddleLibPushed, @"s7 push must push only rebound (and .s7substate committed) subrepos");
    });
}

- (void)testPushDoesntWorkOnNotReboundSubrepo {
    executeInDirectory(self.env.pasteyRd2Repo.absolutePath, ^int{
        s7init();

        NSString *subrepoPath = @"Dependencies/ReaddleLib";
        GitRepository *subrepoGit = s7add(subrepoPath, self.env.githubReaddleLibRepo.absolutePath);

        [self.env.pasteyRd2Repo add:@[S7ConfigFileName, @".gitignore"]];
        [self.env.pasteyRd2Repo commitWithMessage:@"add ReaddleLib subrepo"];
        [self.env.pasteyRd2Repo pushAll];

        NSString *readdleLibRevision = makeSampleCommitToReaddleLib(subrepoGit);

        S7PushCommand *pushCommand = [S7PushCommand new];
        XCTAssertEqual(0, [pushCommand runWithArguments:@[]]);

        const BOOL isReaddleLibPushed = [self.env.githubReaddleLibRepo isRevisionAvailable:readdleLibRevision];
        XCTAssertFalse(isReaddleLibPushed, @"s7 push must push only rebound (and .s7substate committed) subrepos");
    });
}

- (void)testPushDoesntWorkOnReboundSubrepoIfConfigIsNotCommitted {
    executeInDirectory(self.env.pasteyRd2Repo.absolutePath, ^int{
        s7init();

        NSString *subrepoPath = @"Dependencies/ReaddleLib";
        GitRepository *subrepoGit = s7add(subrepoPath, self.env.githubReaddleLibRepo.absolutePath);

        [self.env.pasteyRd2Repo add:@[S7ConfigFileName, @".gitignore"]];
        [self.env.pasteyRd2Repo commitWithMessage:@"add ReaddleLib subrepo"];
        [self.env.pasteyRd2Repo pushAll];

        NSString *readdleLibRevision = makeSampleCommitToReaddleLib(subrepoGit);

        s7rebind();

        // user did `s7 rebind`, but forgot to commit .s7substate

        S7PushCommand *pushCommand = [S7PushCommand new];
        XCTAssertEqual(0, [pushCommand runWithArguments:@[]]);

        const BOOL isReaddleLibPushed = [self.env.githubReaddleLibRepo isRevisionAvailable:readdleLibRevision];
        XCTAssertFalse(isReaddleLibPushed, @"s7 push must push only rebound (and .s7substate committed) subrepos");
    });
}

- (void)testPushWorksOnReboundSubrepoWithCommittedConfig {
    executeInDirectory(self.env.pasteyRd2Repo.absolutePath, ^int{
        s7init();

        NSString *subrepoPath = @"Dependencies/ReaddleLib";
        GitRepository *subrepoGit = s7add(subrepoPath, self.env.githubReaddleLibRepo.absolutePath);

        [self.env.pasteyRd2Repo add:@[S7ConfigFileName, @".gitignore"]];
        [self.env.pasteyRd2Repo commitWithMessage:@"add ReaddleLib subrepo"];
        [self.env.pasteyRd2Repo pushAll];

        NSString *readdleLibRevision = makeSampleCommitToReaddleLib(subrepoGit);

        s7rebind();

        [self.env.pasteyRd2Repo add:@[S7ConfigFileName]];
        [self.env.pasteyRd2Repo commitWithMessage:@"up ReaddleLib"];
        NSString *rd2Revision = nil;
        [self.env.pasteyRd2Repo getCurrentRevision:&rd2Revision];

        S7PushCommand *pushCommand = [S7PushCommand new];
        XCTAssertEqual(0, [pushCommand runWithArguments:@[]]);

        const BOOL isReaddleLibPushed = [self.env.githubReaddleLibRepo isRevisionAvailable:readdleLibRevision];
        XCTAssertTrue(isReaddleLibPushed, @"s7 push must push only rebound (and .s7substate committed) subrepos");

        XCTAssertTrue([self.env.githubRd2Repo isRevisionAvailable:rd2Revision]);
    });
}

- (void)testPushSubrepoWithCustomBranch {
    executeInDirectory(self.env.pasteyRd2Repo.absolutePath, ^int{
        s7init();

        NSString *subrepoPath = @"Dependencies/ReaddleLib";
        GitRepository *subrepoGit = s7add(subrepoPath, self.env.githubReaddleLibRepo.absolutePath);

        [self.env.pasteyRd2Repo add:@[S7ConfigFileName, @".gitignore"]];
        [self.env.pasteyRd2Repo commitWithMessage:@"add ReaddleLib subrepo"];
        [self.env.pasteyRd2Repo pushAll];

        [subrepoGit checkoutNewLocalBranch:@"release/pdfexpert-7.3.2"];
        NSString *readdleLibRevision = makeSampleCommitToReaddleLib(subrepoGit);

        s7rebind();

        [self.env.pasteyRd2Repo add:@[S7ConfigFileName]];
        [self.env.pasteyRd2Repo commitWithMessage:@"up ReaddleLib"];
        NSString *rd2Revision = nil;
        [self.env.pasteyRd2Repo getCurrentRevision:&rd2Revision];

        S7PushCommand *pushCommand = [S7PushCommand new];
        XCTAssertEqual(0, [pushCommand runWithArguments:@[]]);

        const BOOL isReaddleLibPushed = [self.env.githubReaddleLibRepo isRevisionAvailable:readdleLibRevision];
        XCTAssertTrue(isReaddleLibPushed, @"s7 push must push only rebound (and .s7substate committed) subrepos");

        XCTAssertTrue([self.env.githubRd2Repo isRevisionAvailable:rd2Revision]);
    });
}


- (void)testPushAfterFetch {
    executeInDirectory(self.env.pasteyRd2Repo.absolutePath, ^int {
        s7init();

        NSString *subrepoPath = @"Dependencies/ReaddleLib";
        s7add(subrepoPath, self.env.githubReaddleLibRepo.absolutePath);

        [self.env.pasteyRd2Repo add:@[S7ConfigFileName, @".gitignore"]];
        [self.env.pasteyRd2Repo commitWithMessage:@"add ReaddleLib subrepo"];
        [self.env.pasteyRd2Repo pushAll];

        return 0;
    });

    executeInDirectory(self.env.nikRd2Repo.absolutePath, ^int {
        [self.env.nikRd2Repo pull];

        NSString *subrepoPath = @"Dependencies/RDSFTPOnlineClient";
        s7add(subrepoPath, self.env.githubRDSFTPRepo.absolutePath);

        [self.env.nikRd2Repo add:@[S7ConfigFileName, @".gitignore"]];
        [self.env.nikRd2Repo commitWithMessage:@"add SFTP subrepo"];
        [self.env.nikRd2Repo pushAll];

        return 0;
    });

    executeInDirectory(self.env.pasteyRd2Repo.absolutePath, ^int {
        [self.env.pasteyRd2Repo fetch];

        GitRepository *readdleLibGit = [[GitRepository alloc] initWithRepoPath:@"Dependencies/ReaddleLib"];
        NSString *readdleLibRevision = makeSampleCommitToReaddleLib(readdleLibGit);

        s7rebind();

        [self.env.pasteyRd2Repo add:@[S7ConfigFileName]];
        [self.env.pasteyRd2Repo commitWithMessage:@"up ReaddleLib"];

        S7PushCommand *pushCommand = [S7PushCommand new];
        XCTAssertEqual(S7ExitCodeNonFastForwardPush, [pushCommand runWithArguments:@[]]);

        const BOOL isReaddleLibPushed = [self.env.githubReaddleLibRepo isRevisionAvailable:readdleLibRevision];
        XCTAssertFalse(isReaddleLibPushed, @"s7 push must push only rebound (and .s7substate committed) subrepos");
    });
}

- (void)testRebindJustOneSubreposAtATime {
    executeInDirectory(self.env.pasteyRd2Repo.absolutePath, ^int{
        s7init();

        NSString *readdleLibSubrepoPath = @"Dependencies/ReaddleLib";
        GitRepository *readdleLibSubrepoGit = s7add(readdleLibSubrepoPath, self.env.githubReaddleLibRepo.absolutePath);

        NSString *pdfKitSubrepoPath = @"Dependencies/RDPDFKit";
        GitRepository *pdfKitSubrepoGit = s7add(pdfKitSubrepoPath, self.env.githubRDPDFKitRepo.absolutePath);

        [self.env.pasteyRd2Repo add:@[S7ConfigFileName, @".gitignore"]];
        [self.env.pasteyRd2Repo commitWithMessage:@"add ReaddleLib and RDPDFKit subrepos"];
        [self.env.pasteyRd2Repo pushAll];

        NSString *readdleLibRevision = makeSampleCommitToReaddleLib(readdleLibSubrepoGit);
        NSString *pdfKitRevision = makeSampleCommitToRDPDFKit(pdfKitSubrepoGit);

        s7rebind_specific(pdfKitSubrepoPath);

        [self.env.pasteyRd2Repo add:@[S7ConfigFileName, @".gitignore"]];
        [self.env.pasteyRd2Repo commitWithMessage:@"up RDPDFKit"];

        S7PushCommand *pushCommand = [S7PushCommand new];
        XCTAssertEqual(0, [pushCommand runWithArguments:@[]]);

        const BOOL isReaddleLibPushed = [self.env.githubReaddleLibRepo isRevisionAvailable:readdleLibRevision];
        XCTAssertFalse(isReaddleLibPushed, @"s7 push must push only rebound (and .s7substate committed) subrepos");

        const BOOL isPDFKitPushed = [self.env.githubRDPDFKitRepo isRevisionAvailable:pdfKitRevision];
        XCTAssertTrue(isPDFKitPushed, @"s7 push must push only rebound (and .s7substate committed) subrepos");
    });
}

- (void)testInitialPush {
    executeInDirectory(self.env.pasteyRd2Repo.absolutePath, ^int{
        s7init();

        GitRepository *readdleLibSubrepoGit = s7add(@"Dependencies/ReaddleLib", self.env.githubReaddleLibRepo.absolutePath);
        NSString *readdleLibRevision = makeSampleCommitToReaddleLib(readdleLibSubrepoGit);

        s7rebind();

        [self.env.pasteyRd2Repo add:@[S7ConfigFileName, @".gitignore"]];
        [self.env.pasteyRd2Repo commitWithMessage:@"up ReaddleLib"];

        S7PushCommand *pushCommand = [S7PushCommand new];
        XCTAssertEqual(0, [pushCommand runWithArguments:@[]]);

        const BOOL isReaddleLibPushed = [self.env.githubReaddleLibRepo isRevisionAvailable:readdleLibRevision];
        XCTAssertTrue(isReaddleLibPushed, @"s7 push must push only rebound (and .s7substate committed) subrepos");

        return 0;
    });
}

// check subrepo revision and branch consistency? If revision is not at branch, then we will do a kaka to everyone checking out this subrepo.
// validate config â check that full 40-symbol revision saved. Prevent push if not
// test all commited changes to subrepo (even not rebound) get pushed to remote
// test subrepo changes commited after push are not pushed unless subrepo is rebound (and config committed) again
// test push works depth-first â push changes to readdlelib remote from nik, try s7 push on rd2 from pastey; check that changes in rd2 are not pushed
// test recursive push â pdf kit rebound formcalc
// test push works on all branches where config was changed
// what if branch has been dropped at remote?
// do not push if in detached HEAD
// ÐµÑÐ»Ð¸ Ñ Ð¾Ð±Ð½Ð¾Ð²Ð¸Ð» ÑÐ°Ð±ÑÐµÐ¿Ñ Ð² Ð¾Ð´Ð½Ð¾Ð¼ Ð¸Ð· ÐºÐ¾Ð¼Ð¼Ð¸ÑÐ¾Ð², Ð° Ð¿Ð¾ÑÐ¾Ð¼ ÑÐ´Ð°Ð»Ð¸Ð» ÑÑÑ ÑÐ°Ð±ÑÐµÐ¿Ñ â Ð¿ÑÑÐºÐ°ÑÑ Ð½ÐµÑ ÑÐ¼ÑÑÐ»Ð°. ÐÐ¾Ð¿ÑÐ¾Ñ â Ð¼Ð¾Ð³ Ð»Ð¸ Ñ Ð³ÑÐ¾ÑÐ½ÑÑÑ Ð½ÐµÐ·Ð°ÐºÐ¾Ð¼Ð¼Ð¸ÑÐµÐ½Ð½ÑÐµ Ð¸Ð·Ð¼-Ñ Ð² ÑÐ°Ð±ÑÐµÐ¿Ðµ, ÐºÐ¾Ð³Ð´Ð° ÑÐ´Ð°Ð»ÑÐ» ÐµÐµ
// ÐµÑÐ»Ð¸ Ñ Ð¾Ð±Ð½Ð¾Ð²Ð¸Ð» ÑÐ°Ð±ÑÐµÐ¿Ñ, Ð° Ð¿Ð¾ÑÐ¾Ð¼ Ð¾ÑÐ´ÐµÐ»ÑÐ½ÑÐ¼ ÐºÐ¾Ð¼Ð¼Ð¸ÑÐ¾Ð¼ Ð¾ÑÐºÐ°ÑÐ¸Ð» Ð¾Ð±Ð½Ð¾Ð²Ð»ÐµÐ½Ð¸Ðµ â Ð¿ÑÑÐºÐ°ÑÑ? ÐÐ¾Ð´ÑÐ¼Ð¾ÑÑÐµÑÑ Ð² HG
// test push on a new branch
// push â Ð¿Ð¾Ð´Ð²ÑÐ·Ð°ÑÑÑÑ Ð½Ð° pre-push ÑÑÐº. ÐÐµÐ· Ð¿Ð°ÑÐ°Ð¼ÐµÑÑÐ¾Ð² Ð¿ÑÑÐºÐ°ÑÑ ÑÐ¾Ð»ÑÐºÐ¾ ÑÐµÐºÑÑÑÑ Ð²ÐµÑÐºÑ.
// Ð´Ð¾Ð±Ð°Ð²Ð¸ÑÑ ÑÐµÑÑ, ÑÑÐ¾ Ð¿ÑÑÐºÐ°ÐµÑÑÑ ÑÐ¾Ð»ÑÐºÐ¾ ÑÐµÐºÑÑÐ°Ñ Ð²ÐµÑÐºÐ°
// Ð½Ð°Ð´Ð¾ ÐµÑÐµ Ð¿ÑÐ¸Ð²Ð»ÐµÑÑ Ð²ÑÐ¾ÑÐ¾Ð¹ Ð¼Ð¾Ð·Ð³ â Ð½Ðµ Ð¼Ð¾Ð³Ñ Ð¿Ð¾Ð½ÑÑÑ ÐºÐ°Ðº ÑÑÑ Ð¿ÑÐ°Ð²Ð¸Ð»ÑÐ½Ð¾. ÐÐ¾ÐºÐ° Ð´ÐµÐ»Ð°Ñ ÑÐ¾Ð»ÑÐºÐ¾ ÑÐµÐºÑÑÑÑ Ð²ÐµÑÐºÑ.
//    if (pushMainRepo) {
//        const int gitExitStatus = [repo pushCurrentBranch];
//        if (0 != gitExitStatus) {
//            return gitExitStatus;
//        }
//    }
// ÐÐ¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÐµÐ»Ñ Ð¼Ð¾Ð³ Ð½Ð°Ð´ÐµÐ»Ð°ÑÑ Ð¸Ð·Ð¼-Ð¹ Ð½Ð° Ð½ÐµÑÐºÐ¾Ð»ÑÐºÐ¸Ñ Ð²ÐµÑÐºÐ°Ñ Ð² Ð³Ð»Ð°Ð²Ð½Ð¾Ð¼ ÑÐµÐ¿Ð¾Ð·Ð¸ÑÐ¾ÑÐ¸Ð¸, Ð¸ Ð² ÑÐ°Ð±ÑÐµÐ¿Ð°Ñ. s7 push Ð²ÑÐ³Ð»ÑÐ´Ð¸Ñ ÑÐ°Ðº,
// ÑÑÐ¾ ÑÐ¾ÑÐ½Ð¾ Ð´Ð¾Ð»Ð¶ÐµÐ½ Ð·Ð°Ð¿ÑÑÐºÐ°ÑÑ Ð²ÑÐµ Ð²ÐµÑÐºÐ¸ Ð³Ð´Ðµ Ð±ÑÐ» ÑÐ´ÐµÐ»Ð°Ð½ s7 rebind. ÐÐ¾ Ð½Ðµ Ð¿ÑÑÐºÐ°ÑÑ Ð´ÑÑÐ³Ð¸Ðµ Ð²ÐµÑÐºÐ¸ â Ð±ÑÐµÐ´.
// ÐÑÐ»Ð¸ Ð²ÑÐ·Ð¾Ð² Ð¸Ð· ÑÑÐºÐ°, ÑÐ¾ ÑÐ°Ð¼ ÑÐµÑÐºÐ¾ Ð¿ÑÑÐºÐ°ÐµÐ¼ Ð²ÑÐµ ÑÑÐ¾ ÑÐºÐ°Ð·Ð°Ð» ÑÑÐº. Ð Ð²Ð¾Ñ Ð¿ÑÐ¾ÑÑÐ¾ s7 push â Ð²Ð¾Ð¿ÑÐ¾Ñ.
// ÐÐ¾Ð¶Ð½Ð¾ ÑÐ´ÐµÐ»Ð°ÑÑ ÑÐ¾Ð´ ÐºÐ¾Ð½ÐµÐ¼! s7 push Ð´ÐµÐ»Ð°ÐµÑ git push --all, Ð° Ð´Ð°Ð»ÑÑÐµ Ð²ÑÐµ Ð¿Ð¾ Ð½Ð°ÐºÐ°ÑÐ°Ð½Ð½Ð¾Ð¹ ÑÑÐµÐ¼Ðµ!




@end
